import batch from 'it-batch';
import { db } from '@/lib/db';
import { streamer } from '@/lib/db/schema';
import { logger } from '@/lib/logger';
import { KickService } from '@/lib/services/kick';
import { TwitchService } from '@/lib/services/twitch';

export default async function main() {
  const twitchStreamers = [
    'moongirlll_',
    'th3w3rwolf',
    'antivirus_____',
    'summonnval',
    '1howari',
    '1upbruno',
    '3umaar',
    '4tomos',
    'acrorec',
    'adam_hatake01',
    'adamoodz',
    'ahmedsabiri',
    'aiphey',
    'akashi10tv',
    'akuos',
    'amininanoo',
    'anasherooo',
    'aquaysf',
    'arthurr_v',
    'avocadowa___',
    'awildyasuooo',
    'b0usif',
    'bazouya',
    'beauskud12',
    'belkinson',
    'bimo36',
    'bisbis_fps',
    'blackupers',
    'bomaff',
    'breakcap',
    'brino2g',
    'bubbleeone',
    'cactuzioo',
    'ces4rrs_',
    'cha3riya_walid',
    'chadaiii',
    'chaos333gg',
    'chkarada',
    'cristalnside',
    'daddyoxo69',
    'damysus',
    'dante_xv',
    'darksheep55',
    'diayex',
    'dirtyhowaana',
    'dope9xiv',
    'doubleaxe1',
    'drakuma96',
    'dreamerzlel',
    'dreamerzlel1',
    'drvgv',
    'dumbixtheone',
    'dustnpc',
    'eddie_pacer',
    'egt_off',
    'einduckflip',
    'elmambix',
    'empty_z3r0',
    'enami',
    'era1s',
    'escanor0001',
    'etarcos_',
    'evil__666__',
    'fortunesqueen',
    'fouadox',
    'freezerbil',
    'geekmaroctv',
    'ghoull7',
    'glypheofdoom',
    'greenoiis',
    'h1deuu',
    'hadeeesz',
    'hafidhimmi_',
    'hakaay',
    'heraline_',
    'hichamqtr',
    'hilala007',
    'hitskygam3s',
    'ichiro999',
    'ihabgaming9',
    'ihabgaming9tv',
    'ilhaamaa',
    'imana_lol',
    'imperfect_lol',
    'its__infamous',
    'itsjuls',
    'itsmedettol',
    'ivannatravis',
    'jadx9z',
    'jejeval',
    'jingl3ballz',
    'johnqtcs',
    'jokestahh',
    'joy_zak',
    'jwesta',
    'kapay__',
    'kasaikogaming',
    'keenpachl',
    'kheeltv',
    'kn1fedtv',
    'kuh_leel',
    'kumohira',
    'l0uig',
    'l_khoud3a',
    'lady_shana1',
    'Lazzino1',
    'lbahja__1',
    'levyheishoo_',
    'lgamingma',
    'lil_horssey',
    'lkhaych',
    'lonelyhisoka',
    'lordrebhi',
    'MAAROUFIX',
    'machakil00',
    'magicvdk',
    'manitatv',
    'mapozin',
    'maro_panda',
    'mashon_',
    'masteranom',
    'medarv',
    'meowstach_116',
    'mizovich',
    'mnaouares',
    'mohcinegaming1',
    'mohssineelf',
    'motorkout',
    'mplmorocco',
    'mr_k4plan',
    'mralectrona',
    'mrhomeee',
    'mrrpropre',
    'msgmaroine',
    'mspoppygod',
    'n3crovision',
    'nadgamer77',
    'nahoule82',
    'naimiyu',
    'nameless_rising',
    'narukya_lol',
    'norman3',
    'nounachan',
    'noxus_val',
    'ocienmusic',
    'omizoone',
    'onlyauraa_',
    'ouaksim',
    'oumaima',
    'oziux',
    'Pandicorn___',
    'papa3jinaa',
    'papa_cut',
    'PapiAwaken',
    'phoenixv_',
    'pipo_lmadafak',
    'pouroii',
    'predarc',
    'prettysailor_moon',
    'raiizow',
    'rainman',
    'ranlight',
    'ray50x',
    'rayx50',
    'Rocmine',
    'rofexje',
    'roflda',
    'ryowannabe',
    'salimxsrew',
    'SalvadorNotToxic',
    'sazangg',
    'shake_make',
    'shekshok',
    'sifu_u',
    'skinnny',
    'sniper_nolove',
    'spanpa',
    'spow_ho9ni1',
    'sssmina',
    'stormix_dev',
    'superico',
    'supernova__a',
    'sweetoxiin',
    'sykoooooooooooo',
    'taco_val',
    'taokkaa666',
    'tforeda',
    'thahmd',
    'the19juicer',
    'Theeritee',
    'theeritee',
    'timazera',
    'transatlas',
    'troublemaker1g',
    'trunks2g',
    'tufiita',
    'umadara__',
    'unholyharmony',
    'vbdox',
    'Vipersense1',
    'vipersense1',
    'vodkafunky1',
    'wadii1',
    'whitekhonovis',
    'xcharifx_',
    'yonagl',
    'youigta',
    'youne99s',
    'za3l0ok',
    'zenok_u',
    'zikoos_jam',
    'zwba3a',
    'mj4dn',
    'hakkimma',
    'bettywhite01',
    'wrongnameee',
    'criss_xc',
    'tpm1g_fps',
    'hajargh',
    'moushibot',
  ];

  const kickMapping: Record<string, string> = {
    keenpachl: 'keenpachl',
    dreamerzlel: 'drmz',
    fouadox: 'fouadox',
    onlyauraa_: 'onlyauraa',
    stormix_dev: 'stormix-dev',
    skinnny: 'skinnny',
    vodkafunky1: 'vodkafunky',
    l_khoud3a: 'lkhoud3a',
    lordrebhi: 'lordrebhi',
    ahmedsabiri: 'ahmedsabiri',
    marouane53: 'marouane53',
    '1howari': 'lhowarii',
    '111fox': '111fox',
    etarcos_: 'etarcos',
    chtaiba: 'chtaiba',
    shake_make: 'shake_make',
    its__infamous: 'infamouss',
    rainman: 'rainman-fps',
    superico: 'superico',
    chaos333gg: 'chaos333gg',
    bazouyaa: 'bazouyaa',
    hilala007: 'hilala007',
    hakkimma: 'hakkimma',
    ladyvine_h: 'ladyvine',
    itsmedettol: 'itsmedettol',
    damysus: 'damysus',
    mj4dn: 'mjaddd',
    bettywhite01: 'bettywhite01',
    the19juicer: 'the19juicer',
    elmambix: 'elmambix',
    eddie: 'eddie',
  };

  const kickStreamers = [
    'mathematicien',
    'y0ti',
    'samihamza',
    'sma3n',
    'naimiv8',
  ];

  const batches = batch(twitchStreamers, 100);

  for await (const batch of batches) {
    const streamers = await TwitchService.instance.getStreamers(batch);
    if (streamers.isErr()) {
      logger.withError(streamers.error).error('Failed to get streamers');
      continue;
    }

    await db
      .insert(streamer)
      .values(
        streamers.value.map((streamer) => ({
          name: streamer.name,
          avatarUrl: streamer.profilePictureUrl,
          twitchId: streamer.id,
          twitchUsername: streamer.name,
          kickUsername: kickMapping?.[streamer.name.toLowerCase()] ?? null,
        }))
      )
      .onConflictDoNothing();
  }

  for (const kickStreamer of kickStreamers) {
    // biome-ignore lint/nursery/noAwaitInLoop: diha f mok
    const streamerKick = await KickService.instance.getStreamer(kickStreamer);
    if (streamerKick.isErr()) {
      logger.withError(streamerKick.error).error('Failed to get streamer');
    } else {
      const value = streamerKick.value;
      if (!value) {
        logger.error('Streamer not found');
        continue;
      }
      await db
        .insert(streamer)
        .values({
          name: value.slug,
          avatarUrl: value.banner_picture,
          kickId: value.broadcaster_user_id.toString(),
          kickUsername: value.slug,
        })
        .onConflictDoNothing();
    }
  }

  logger
    .withMetadata({
      count: twitchStreamers.length,
    })
    .info('Streamers inserted successfully');
}
